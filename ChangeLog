2005-02-08 Aladair Allan <aa@astro.ex.ac.uk>

        * Modified UA::Handler and JACH::Handler to deal with the new 
          <Target type="" ident=""></Target> tags generated by the next
          revision of eSTAR::RTML (v1.9.1). We now pass the observation type 
          to the embedded agent via the "ident" attribute rather than the
          "type" attribute. This causes less DTD breakage.
          
2005-02-07 Aladair Allan <aa@astro.ex.ac.uk>


        * bin/gcn_server.pl: Moved TCP/IP server into it's own thread and
          multi-threaded the response on callback. Basic building blocks
          complete, now actually have to write some filtering code.

        * Removed get_reference() from list of routines exported by singleton
          modules such as eSTAR::Process and eSTAR::Config. Should be called
          explicitly anyway using eSTAR::*::get_reference() because several of
          the single instance modules have this method we have namespace 
          clashes if you don't do it that way.
        
        * lib/perl5/GCN/Util.pm: Utility class for gcn_server.pl
        
        * Added .cvsignore files to all directories
        
        * Modified UA::Handler and JACH::Handler to deal with the new 
          <Target type=""></Target> tags generated by eSTAR::RTML. We now
          pass the observation type to the embedded agent so that if it's
          of type InitalBurstFollowup (etc) we can grab the templates
          directly from the OMP rather than parsing flat files.
          
        * lib/perl5/eSTAR/JACH/Handler.pm: Working using the new magic
          words method to retrieve the MSBs directly from the OMP rather
          than parsing flat file templates in the source directories.  
          
2005-02-04 Aladair Allan <aa@astro.ex.ac.uk>

        * bin/gcn_server.pl: Working socket connection to GCN service that
          correctly accepts packets and send an ACK response. Does nothing
          with the packets except log their arrival.

2005-02-02 Aladair Allan <aa@astro.ex.ac.uk>

        * bin/gcn_server.pl: A program to accept incoming GCN packets. Basic
          framework for a server to recieve the GCN packets. It currently will
          recieve the packets correctly, but does not respond with the correct
          ACK message. Possibly something to do with the way I open and close
          the socket?
        
        * lib/perl5/GCN/Constants.pm: Module to manage constants for the
          gcn_server.pl program.

2005-01-19 Alasdair Allan <aa@astro.ex.ac.uk> 
           Tim Jenness <timj@jach.hawaii.edu>

	* bin/jach_agent.pl and associated classes have been updated to
          work with the new JAC infrastructre and with the 3G eSTAR code.
          Code now loopbacks correctly when poked via ORAC-DR test script.

2005-01-11 Alasdair Allan <aa@astro.ex.ac.uk>

        * bin/user_agent.pl: Fulling working 3G user_agent.pl which will 
          talk to the 2G node_agent.pl running on dn2.astro.ex.ac.uk. This 
          user agent should be a lot more robust that the equivalent 2G 
          version as a lot of the nastiest as been refactored out into
          singleton classes.
          
        * bin/jach_agent.pl: Some refactoring, should now work (fully 3G?)
          but doesn't run up due to problems with OMP::SciProg modules.  

2005-01-10 Alasdair Allan <aa@astro.ex.ac.uk>

        * Extensive modifications to move the Config::Simple() backend into
          a singleton object. Modifications to user_agent.pl and to the
          eSTAR::UA::Handler to support the creation of an eSTAR::Config
          singleton class. Also modified eSTAR::Util.
          
          All other agent processes now need modifying to use the same
          code base. The user_agent.pl has been tested sucessfully against
          dn2.astro in SingleExposure mode only running on estar.astro,
          need to install NAG f95 onto estar.astro to test in Followup mode.
        
        * bin/make_observation.pl: Ported from second generation code base
          to help test the user_agent.pl against dn2.astro.
          
2004-12-21 Alasdair Allan <aa@astro.ex.ac.uk>

        * Fixes to get rid of the last $main::* references from the library
          code. All access to main:: resources should now be going through
          single instance objects such as eSTAR::Process and eSTAR::UserAgent
          
2004-11-12 Alasdair Allan <aa@astro.ex.ac.uk>

        * Large number of changes to make the jach_agent.pl code to actually
          work. All ESTAR2_* and ESTAR3_* environment variables have been
          removed, gone back to ESTAR_* variables. We shouldn't need to 
          ever run the old code again and the multiply defined PERL5LIB 
          managed to confuse things enough that I was running some of the
          old code, and some of the new code. This wasn't good, it all seemed 
          to work, but actually didn't.
          
          The only $main::* problem outstanging is the $main::OPT{"http_agent"}
          call in the eSTAR::JACH::Handler, not sure how to approach this at
          the moment. All the %running accesses should now be via the new
          eSTAR::JACH::Running module which stores a reference to the running
          hash created in main() and shared across threads. I think this should
          allow me to lock the internally stored variable in the object without
          having to actually share the object, which I don't think is possible
          yet.
          
        * Removed all reference (hopefully) to JACH__* errors, now using a 
          package wide ESTAR__* error.
          
        * Returned to using the ThreadOnAccept daemon module, we need to share
          the %running hash across threads or it all doesn't work.  
          
2004-11-05 Alasdair Allan <aa@astro.ex.ac.uk>

        * Added some jach_agent.pl code from 2nd generation work, mostly ported
          this code to third generation framework. Problems with the %running
          hash. Need to share the %running hash across threads, and then use
          an eSTAR::Running object to access a reference to this hash perhaps?

2004-02-20 Alasdair Allan <aa@astro.ex.ac.uk>

        * Added freeze(), thaw() and melt() functions for arbitary objects 
	  being serialised to the ~/.estar/$process/state/ directory. 
	  
	* Added set_state() and get_state() functions to allow access to the
	  state.dat file as well as the options.dat file to which access was
	  provided yesterday with the get_option() and set_option() methods.
	  
	* Moved all the options/state querying to eSTAR::Util and put wrapper
	  methods into the Handler classes only.
	  
	* Wrote a datamining_client.pl script which pushes a VOTable file to
	  the data_miner.pl process, along with a host:port to reply to and
	  context ID. This script runs up a "fake" wfcam_agent server for the
	  data_miner.pl to reply to after it has processed the pushed file if
	  a command line switch is given, otherwise you need to have the
	  the data_miner.pl and wfcam_agent.pl running.
	  
	* Added a handle_objects() method to the data_miner.pl, this should  
	  return immediately with an ACK to the client/agent calling it saying
	  that everything is okay, and then return its results in an async
	  manner using threads.
	  
	* Made eSTAR::Util use EXPORT_OK rather than EXPORT and fixed the
	  class method calls (hopefully) to reflect this change.        
	  
	* Added handle_results() method to the wfcam_agent.pl. This will
	  handle results returned by the data_miner.pl.
	    
2004-02-19 Alasdair Allan <aa@astro.ex.ac.uk>

        * Got ping() and echo() working for wfcam_agent.pl. Fixed the breaks
	  in encapsulation present from the 2nd generation code by making 
	  eSTAR::Process and eSTAR::Logging single instance objects.

        * Added a data mining process, carbon copy of the wfcam_agant.pl
	  code with configurations changed. Need to find some way to grab
	  some meta-classes from this so that the 4th generation stuff can
	  actually be easier to write than is currently the case.
	
	* Added a client to generate a VOTable catalogue for a given radius
	  around a given target. Used for deubgging and development of the
	  WFCAM agent and Data Mining Daemon.
	
	* Default options are now generated on first program run only, and
	  the SOAP server has get and set methods exposed to change these.
	      	  
2004-02-18 Alasdair Allan <aa@astro.ex.ac.uk>

        * Inital skeleton installation of the WFCAM survey_agent.pl 
          built. This package is going to be the first 3rd generation
          agent built for the eSTAR project. Initally it should talk
          to the current user_agent.pl and the rest of the 2nd generation
          code, but if Robonet-1.0 goes ahead we'll need to refactor
          the top level User Agent code as it's not robust enough for
          general distribution to astronomers.
          
